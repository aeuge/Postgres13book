# backup
sudo mkdir /home/1 && sudo chmod 777 /home/1

sudo -u postgres psql

-- создадим табличку для тестов
CREATE DATABASE backup;
\c backup
CREATE TABLE test (i int, col text);
INSERT INTO test VALUES (1, '123'), (2, '456'), (3, '789');

-- сделаем логическую копию
COPY test TO '/home/1/test.csv' CSV HEADER;

\! cat /home/1/test.csv

-- восстановим данные в другую табличку
-- ошибка!!!
COPY test2 FROM '/home/1/test.csv' CSV HEADER;

-- таблица должна быть создана заранее
CREATE TABLE test2 (i int, col text);
COPY test2 FROM '/home/1/test.csv' CSV HEADER;
SELECT * FROM test2;

-- архивируем БД через консольную утилиту
exit -- from psql
sudo -u postgres pg_dump -d backup --create
sudo -u postgres pg_dump -d backup --create > /home/1/1.sql
sudo -u postgres pg_dump -d backup --create | gzip > /home/1/backup.gz

-- для pg_restore - кастомный сжатый формат
sudo -u postgres pg_dump -d backup -Fc > /home/1/custom.gz

-- посмотрим содержимое через cat

-- восстановим БД
sudo -u postgres psql < /home/1/1.sql
sudo -u postgres psql
\c backup
select * from test2;
\dt
exit
echo "DROP DATABASE backup;" | sudo -u postgres psql
sudo -u postgres psql < /home/1/1.sql

-- через pg_restore
-- получим дубликаты данных
sudo -u postgres pg_restore /home/1/custom.gz -d backup
sudo -u postgres psql
\c backup
select * from test2;

echo "DROP DATABASE backup;" | sudo -u postgres psql
sudo -u postgres pg_restore /home/1/custom.gz -d backup

-- correct
echo "CREATE DATABASE backup;" | sudo -u postgres psql
sudo -u postgres pg_restore /home/1/custom.gz -d backup
sudo -u postgres psql
\c backup
select * from test2;

-- inly 1 table
echo "DROP DATABASE backup;" | sudo -u postgres psql
echo "CREATE DATABASE backup;" | sudo -u postgres psql
sudo -u postgres pg_restore -t test /home/1/custom.gz -d backup
sudo -u postgres psql
\c backup
\dt


-- если перекодировать 
pg_dump ... | iconv -f utf-8 -t cp-1251 > dump.sql

-- посмотрим на параметры pg_dump && pg_restore
sudo -u postgres pg_dump --help
sudo -u postgres pg_restore --help

-- pg_dumpall
sudo -u postgres pg_dumpall > /home/1/backupall.sql

-- Восстановление
sudo -u postgres psql < /home/1/backupall.sql

-- параллельный вариант
sudo -u postgres pg_dumpall --clean --globals-only > /home/1/globals.sql
sudo -u postgres pg_dumpall --clean --schema-only > /home/1/schema.sql
sudo -u postgres pg_dump -d backup --create > /home/1/1.sql
sudo -u postgres psql < /home/1/globals.sql
sudo -u postgres psql < /home/1/schema.sql
sudo -u postgres psql < /home/1/1.sql


-- физическая репликация
-- посмотрим параметры
SELECT name, setting FROM pg_settings WHERE name IN ('wal_level','max_wal_senders');

SELECT * FROM pg_replication_slots;

-- Необходимо настроить файервол в файле pg_hba.conf для получения доступа извне localhost
SELECT type, database, user_name, address, auth_method 
FROM pg_hba_file_rules() WHERE DATABASE = '{replication}';


-- Создадим 2 кластер
sudo -u postgres pg_createcluster -d /var/lib/postgresql/13/main2 13 main2
-- Удалим оттуда файлы
sudo -u postgres rm -rf /var/lib/postgresql/13/main2
-- Сделаем бэкап нашей БД
sudo -u postgres pg_basebackup -p 5432 -D /var/lib/postgresql/13/main2
-- удалим ненужно уже табличное пространство ts в /home/postgres/tmptblspace
sudo -u postgres psql
\db
DROP TABLESPACE ts;

-- есть ли объекты в нашем ts
SELECT c.relname, t.spcname 
FROM pg_class c 
  JOIN pg_tablespace t ON c.reltablespace = t.oid 
WHERE t.spcname = 'ts';

-- смотрим БД подробно
\l+
DROP DATABASE app;
DROP TABLESPACE ts;
-- Сделаем бэкап нашей БД
sudo -u postgres pg_basebackup -p 5432 -D /var/lib/postgresql/13/main2

-- Стартуем кластер
sudo -u postgres pg_ctlcluster 13 main2 start
-- Смотрим как стартовал
pg_lsclusters

sudo -u postgres psql --port 5433
\l
\c backup
select * from test;

-- файловый архив
SELECT name, setting FROM pg_settings WHERE name IN ('archive_mode','archive_command','archive_timeout');



