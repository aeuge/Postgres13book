
SELECT * FROM pg_locks \gx
SELECT pg_backend_pid();
SHOW log_lock_waits;

CREATE DATABASE locks;
\c locks
-- увидим, что pid изменился
SELECT pg_backend_pid();
CREATE TABLE t (i int);

-- посмотрим, что например VIEW тоже является видом RELATION
BEGIN;
SELECT * FROM pg_locks;
CREATE VIEW v AS SELECT * FROM t;
SELECT * FROM pg_locks;
SELECT relname FROM pg_class WHERE oid = 16385;
ROLLBACK;

-- рекомендательные блокировки advisory_lock
-- в первом терминале
BEGIN; 
SELECT hashtext('заблокируй меня полностью');
SELECT pg_advisory_lock(hashtext('заблокируй меня полностью'));
SELECT pg_backend_pid();

SELECT locktype, relation::REGCLASS, virtualxid AS virtxid, transactionid AS xid, mode, granted FROM pg_locks WHERE pid = 1883;

--попробуем во втором терминале
SELECT pg_advisory_lock(hashtext('заблокируй меня полностью'));

-- в 1 терминале
COMMIT; 

-- commit не освобождает блокировку
SELECT pg_advisory_unlock(hashtext('заблокируй меня полностью'));
-- только под своим PID



-- посмотрим различные виды блокировок строк и как найти, кто нас блокирует. 
-- Для это мы будет работать из 2 параллельных терминаловв и, соответственно, сессий
CREATE TABLE accounts(id integer, amount numeric);
INSERT INTO accounts VALUES (1,2000.00), (2,2000.00), (3,2000.00);

-- во втором окне
\c locks
begin;
SELECT pg_backend_pid();
SELECT locktype, relation::REGCLASS, virtualxid AS virtxid, transactionid AS xid, mode, granted FROM pg_locks WHERE pid = 2165;
UPDATE accounts SET amount = amount + 1 WHERE id = 1;
-- смотрим опять блокировки - что изменилось и почему?

-- зайдем в первом терминале
CREATE INDEX ON accounts(id);
-- Что произойдет?
-- проверим во втором терминале
SELECT locktype, relation::REGCLASS, virtualxid AS virtxid, transactionid AS xid, mode, granted FROM pg_locks WHERE pid = 2165;
SELECT locktype, relation::REGCLASS, virtualxid AS virtxid, transactionid AS xid, mode, granted FROM pg_locks;
-- узнаем, кто нас блокирует
SELECT pg_blocking_pids(1883); 

-- и что вообще происходит PG_STAT_ACTIVITY
SELECT * FROM pg_stat_activity WHERE pid = ANY(pg_blocking_pids(1883)) \gx
commit;



-- блокировка строк более глубоко
CREATE EXTENSION pageinspect;
CREATE VIEW accounts_v AS
SELECT '(0,'||lp||')' AS ctid,
       t_xmax as xmax,
       CASE WHEN (t_infomask & 1024) > 0  THEN 't' END AS commited,
       CASE WHEN (t_infomask & 2048) > 0  THEN 't' END AS aborted,
       CASE WHEN (t_infomask & 128) > 0   THEN 't' END AS lock_only,
       CASE WHEN (t_infomask & 4096) > 0  THEN 't' END AS is_multi,
       CASE WHEN (t_infomask2 & 8192) > 0 THEN 't' END AS keys_upd
FROM heap_page_items(get_raw_page('accounts',0))
WHERE lp <= 10
ORDER BY lp;

SELECT * FROM accounts;
SELECT * FROM accounts_v ;
truncate accounts;
INSERT INTO accounts VALUES (1,2000.00), (2,2000.00), (3,2000.00);

BEGIN;
UPDATE accounts set id = 4 WHERE id = 1;
UPDATE accounts set amount = 4000 WHERE id = 3;
SELECT * FROM accounts_v ;


-- во втором терминале
BEGIN;
SELECT * FROM accounts WHERE id = 2 FOR KEY SHARE;
SELECT * FROM accounts WHERE id = 3 FOR KEY SHARE;
SELECT * FROM accounts_v;
CREATE EXTENSION pgrowlocks;
SELECT * FROM pgrowlocks('accounts') \gx

-- Очередь ожидания
CREATE VIEW locks_v AS
SELECT pid,
       locktype,
       CASE locktype
         WHEN 'relation' THEN relation::REGCLASS::text
         WHEN 'virtualxid' THEN virtualxid::text
         WHEN 'transactionid' THEN transactionid::text
         WHEN 'tuple' THEN relation::REGCLASS::text||':'||tuple::text
       END AS lockid,
       mode,
       granted
FROM pg_locks;


SELECT * FROM locks_v;


-- попытка посмотреть блокировки
SELECT pid, backend_type, wait_event_type, wait_event FROM pg_stat_activity;

-- обычно получаем блокировку, а в этом режиме получим ошибку
SELECT * FROM accounts FOR UPDATE NOWAIT; 

-- для многопоточной обработки данных
DECLARE c CURSOR FOR SELECT * FROM accounts ORDER BY id FOR UPDATE SKIP LOCKED;
FETCH C; 


