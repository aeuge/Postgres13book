#replica

-- Посмотрим статус кластера
pg_lsclusters

-- Остановим и удалим 2 кластер:
sudo pg_ctlcluster 13 main2 stop
sudo pg_dropcluster 13 main2

-- Создадим 2 кластер
sudo pg_createcluster -d /var/lib/postgresql/13/main2 13 main2


-- Посмотрим статус кластера
pg_lsclusters

--Удалим оттуда файлы
sudo rm -rf /var/lib/postgresql/13/main2

-- Сделаем бэкап нашей БД. Ключ -R создаст заготовку управляющего файла recovery.conf.
sudo -u postgres pg_basebackup -p 5432 -R -D /var/lib/postgresql/13/main2

-- Добавим параметр горячего резерва
sudo su postgres
echo 'hot_standby = on' >> /var/lib/postgresql/13/main2/postgresql.auto.conf
exit

-- Стартуем кластер
sudo pg_ctlcluster 13 main2 start

--Смотрим как стартовал
pg_lsclusters

-- на мастере создадим БД и посмотрим, что произошло на реплике
sudo -u postgres psql
CREATE DATABASE replica;
exit;
sudo -u postgres psql -p 5433
\l replica


-- Проверим состояние репликации:
SELECT * FROM pg_stat_replication \gx

-- Посмотрим на процессы реплики:
sudo su postgres
ps -o pid,command --ppid `head -n 1 /var/lib/postgresql/13/main2/postmaster.pid`
 PID COMMAND
  848 postgres: 10/main2: startup process   recovering 00000001000000000000000B
  849 postgres: 10/main2: checkpointer process
  850 postgres: 10/main2: writer process
  851 postgres: 10/main2: stats collector process
  852 postgres: 10/main2: wal receiver process   streaming 0/B002290
Процесс wal receiver принимает поток журнальных записей, процесс startup применяет изменения.

-- Сравним с процессами мастера:
ps -o pid,command --ppid `head -n 1 /var/lib/postgresql/13/main/postmaster.pid`
  PID COMMAND
  853 postgres: 10/main: wal sender process postgres [local] streaming 0/B002290
10430 postgres: 10/main: checkpointer process
10431 postgres: 10/main: writer process
10432 postgres: 10/main: wal writer process
10433 postgres: 10/main: autovacuum launcher process
10434 postgres: 10/main: stats collector process
10435 postgres: 10/main: bgworker: logical replication launcher

ps -xf

-- перевести реплику в состояние мастера
pg_ctlcluster 13 main2 promote



-- Логическая репликация
ALTER SYSTEM SET wal_level = logical;

-- Рестартуем кластер
sudo pg_ctlcluster 13 main restart
sudo -u postgres psql

-- Поменяем пароль пользователю postgres
\password
-- На первом сервере создаем публикацию:
\c replica
CREATE TABLE test(i int);
CREATE PUBLICATION test_pub FOR TABLE test;
-- \password 
\dRp+


-- создадим подписку на втором экземпляре
sudo -u postgres psql -p 5433
\c replica
CREATE TABLE test(i int);
-- создадим подписку к БД по Порту с Юзером и Паролем и Копированием данных=false
CREATE SUBSCRIPTION test_sub 
CONNECTION 'host=localhost port=5432 user=postgres password=Postgres123# dbname=replica' 
PUBLICATION test_pub WITH (copy_data = false);

\dRs

-- Посмотрим на состояние подписки:
SELECT * FROM pg_stat_subscription \gx

--добавим одинаковые данные
-- на подписчике
INSERT INTO test VALUES(1);

-- на публикующем сервере
INSERT INTO test VALUES(1);

--на подписчике
SELECT * FROM test;

-- очистим таблицу и добавим индекс
TRUNCATE test;
CREATE UNIQUE INDEX ON test (i);
\dS+ test

-- проверим одинаковые данные после создания индекса
-- на подписчике
INSERT INTO test VALUES(2);

-- на публикующем сервере
INSERT INTO test VALUES(2);

--на подписчике
SELECT * FROM test;

-- Посмотрим на состояние подписки:
SELECT * FROM pg_stat_subscription \gx

-- также проблему увидим в логах
sudo tail /var/log/postgresql/postgresql-13-main2.log

-- удалим на подписчике конфликтующую запись
DELETE FROM test WHERE i = 2;

-- Посмотрим на состояние подписки:
SELECT * FROM pg_stat_subscription \gx

-- чтобы удалить публикацию и подписку 
DROP PUBLICATION test_pub;
DROP SUBSCRIPTION test_sub;

