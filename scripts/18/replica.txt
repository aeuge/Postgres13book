#replica

-- Посмотрим статус кластера
pg_lsclusters

-- Остановим и удалим 2 кластер:
sudo pg_ctlcluster 13 main2 stop
sudo pg_dropcluster 13 main2

-- Создадим 2 кластер
sudo pg_createcluster -d /var/lib/postgresql/13/main2 13 main2


-- Посмотрим статус кластера
pg_lsclusters

--Удалим оттуда файлы
sudo rm -rf /var/lib/postgresql/13/main2

-- Сделаем бэкап нашей БД. Ключ -R создаст заготовку управляющего файла recovery.conf.
sudo -u postgres pg_basebackup -p 5432 -R -D /var/lib/postgresql/13/main2

-- Добавим параметр горячего резерва
sudo su postgres
echo 'hot_standby = on' >> /var/lib/postgresql/13/main2/postgresql.auto.conf
exit

-- Стартуем кластер
sudo pg_ctlcluster 13 main2 start

--Смотрим как стартовал
pg_lsclusters

-- на мастере создадим БД и посмотрим, что произошло на реплике
sudo -u postgres psql
CREATE DATABASE replica;
exit;
sudo -u postgres psql -p 5433
\l replica


-- Проверим состояние репликации:
SELECT * FROM pg_stat_replication \gx

-- Посмотрим на процессы реплики:
sudo su postgres
ps -o pid,command --ppid `head -n 1 /var/lib/postgresql/13/main2/postmaster.pid`
 PID COMMAND
  848 postgres: 10/main2: startup process   recovering 00000001000000000000000B
  849 postgres: 10/main2: checkpointer process
  850 postgres: 10/main2: writer process
  851 postgres: 10/main2: stats collector process
  852 postgres: 10/main2: wal receiver process   streaming 0/B002290
Процесс wal receiver принимает поток журнальных записей, процесс startup применяет изменения.

-- Сравним с процессами мастера:
ps -o pid,command --ppid `head -n 1 /var/lib/postgresql/13/main/postmaster.pid`
  PID COMMAND
  853 postgres: 10/main: wal sender process postgres [local] streaming 0/B002290
10430 postgres: 10/main: checkpointer process
10431 postgres: 10/main: writer process
10432 postgres: 10/main: wal writer process
10433 postgres: 10/main: autovacuum launcher process
10434 postgres: 10/main: stats collector process
10435 postgres: 10/main: bgworker: logical replication launcher

ps -xf

-- перевести реплику в состояние мастера
pg_ctlcluster 13 main2 promote



-- Логическая репликация
ALTER SYSTEM SET wal_level = logical;

Рестартуем кластер
sudo pg_ctlcluster 10 main restart


На первом сервере создаем публикацию:
CREATE TABLE test(i int);
CREATE PUBLICATION test_pub FOR TABLE test;
\password 
-- otus$123
\dRp+

создадим подписку на втором экземпляре
CREATE TABLE test(i int);
--создадим подписку к БД по Порту с Юзером и Паролем и Копированием данных=false
CREATE SUBSCRIPTION test_sub 
CONNECTION 'host=localhost port=5432 user=postgres password=otus$123 dbname=postgres' 
PUBLICATION test_pub WITH (copy_data = false);
--
\dRs

SELECT * FROM pg_stat_subscription \gx

--добавим одинаковые данные


---добавить индекс
CREATE unique index on test (i);
\dS+ test

drop publication test_pub;
drop subscription test_sub;

--проверим одинаковые данные

почему данные залились во 2 экземпляр?




--добавим индекс на 2 БД

tail /var/log/postgresql/postgresql-13-main2.log



-- настроим реплику на 2 ВМ
Как посмотреть конфигурационные файлы?

# show hba_file;
# show config_file;
-- настроим подключение
sudo su postgres
-- listener = '*'
nano /etc/postgresql/13/main/postgresql.conf
-- host all all 0.0.0.0/0 md5
-- host relication all 0.0.0.0/0 md5
ALTER USER postgres password '123$otus';
-- но лучше завести своего пользователя для репликации
pg_ctlcluster 13 main stop
pg_ctlcluster 13 main start

gcloud compute instances list
psql -h 35.239.28.170 -U postgres -W
CREATE TABLE t( i int);
INSERT INTO t values(1);

-- развернем ВМ postgres в GCE
gcloud beta compute --project=calm-tendril-290110 instances create postgres2 --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=postgres2 --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
 
gcloud compute ssh postgres2
 
-- установим 13 версию
sudo apt UPDATE && sudo apt upgrade -y && sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - && sudo apt-get UPDATE && sudo apt-get -y install postgresql && sudo apt install unzip

sudo rm -rf /var/lib/postgresql/13/main
pg_basebackup -p 5432 -h 35.239.28.170 -R -D /var/lib/postgresql/13/main -U postgres -W
pg_ctlcluster 13 main start

-- удалим наш проект
gcloud compute instances delete postgres
gcloud compute instances delete postgres2



-- docker

-- развернем ВМ postgres в GCE
gcloud beta compute --project=calm-tendril-290110 instances create postgresdocker --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=postgresdocker --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
 
gcloud compute ssh postgresdocker

-- поставим докер
sudo apt-get UPDATE && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo apt-key fingerprint 0EBFCD88 && sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) sTABLE" && sudo apt-get UPDATE && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

sudo docker run --name pg-server -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 -v /var/lib/postgres:/var/lib/postgresql/data postgres:13


-- развернем ВМ 2 postgres в GCE
gcloud beta compute --project=calm-tendril-290110 instances create postgresdocker2 --zone=us-central1-a --machine-type=e2-medium --subnet=default --network-tier=PREMIUM --maintenance-policy=MIGRATE --service-account=322426944095-compute@developer.gserviceaccount.com --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append --image=ubuntu-2004-focal-v20200907 --image-project=ubuntu-os-cloud --boot-disk-size=10GB --boot-disk-type=pd-ssd --boot-disk-device-name=postgresdocker2 --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --reservation-affinity=any
 
gcloud compute ssh postgresdocker2

-- поставим докер
sudo apt-get UPDATE && sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && sudo apt-key fingerprint 0EBFCD88 && sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) sTABLE" && sudo apt-get UPDATE && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

sudo docker run --name pg-replica -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 -v /var/lib/postgres:/var/lib/postgresql/data postgres:13


!! бэкап делаем внутрь!! подключаемого диска контейнера
sudo docker exec -i pg-replica pg_basebackup -p 5432 -h 35.239.28.170 -R -D /var/lib/postgresql/data/data2 -U postgres -W

-- на 1 ВМ
-- нужно выяснить где лежит pg_hba.conf
-- sudo docker exec -it pg-server bash
sudo docker stop pg-server
-- руками меняем listener * на хосте, не в докере !!!
sudo nano /var/lib/postgres/pg_hba.conf
-- и host relication all 0.0.0.0/0 md5
sudo nano /var/lib/postgres/postgresql.conf
sudo docker start pg-server

-- на 2 ноде 
-- docker exec -i -pg-replica pg_ctlcluster 13 main stop
-- sudo docker exec -i pg-replica rm -rf /var/lib/postgresql/data
!! бэкап делаем внутрь!! подключаемого диска контейнера
sudo docker exec -i pg-replica pg_basebackup -p 5432 -h 35.239.28.170 -R -D /var/lib/postgresql/data/data2 -U postgres -W

--change data_direcotory to /var/lib/postgresql/data/data2
sudo docker stop pg-replica
sudo nano /var/lib/postgres/postgresql.conf 
-- sudo docker exec -i pg-replica rm -rf /var/lib/postgresql/data
-- sudo docker exec -it pg-replica bash
sudo docker start pg-replica
-- sudo docker run -it --rm --network pg-net --name pg-client postgres:13 psql -h pg-server -U postgres
-- sudo docker ps -a

или 2 вариант:
https://gist.github.com/lfittl/9689e3b7b3e1293f1f18


